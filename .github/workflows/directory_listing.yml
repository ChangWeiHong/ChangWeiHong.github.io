name: sitemap-under-subpath
on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      # Create sitemap folder
      - name: Create sitemap directory
        run: mkdir -p sitemap

      - name: Generate styled folder-only sitemap
  run: |
    set -euo pipefail
    mkdir -p sitemap

    cat > sitemap/index.html <<'HTML'
    <!doctype html>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Repository Folders</title>
    <style>
      :root {
        --bg:#0b1220; --card:#111827; --text:#e5e7eb; --muted:#94a3b8; --accent:#60a5fa; --border:#1f2937;
      }
      *{box-sizing:border-box}
      body{margin:0;background:var(--bg);color:var(--text);font:16px/1.5 ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Arial}
      header{max-width:1100px;margin:32px auto 12px;padding:0 16px}
      h1{margin:0 0 8px;font-size:24px}
      .muted{color:var(--muted);font-size:14px}
      .search{margin-top:14px;display:flex;gap:8px}
      input[type="search"]{
        width:100%;padding:12px 14px;border:1px solid var(--border);border-radius:10px;background:#0f172a;color:var(--text);
        outline:none
      }
      .grid{max-width:1100px;margin:18px auto;padding:0 16px;display:grid;grid-template-columns:repeat(auto-fill,minmax(220px,1fr));gap:14px}
      .card{
        background:var(--card);border:1px solid var(--border);border-radius:14px;padding:14px;display:flex;gap:12px;align-items:flex-start;
        text-decoration:none;color:inherit;transition:transform .08s ease, border-color .2s ease
      }
      .card:hover{transform:translateY(-1px);border-color:var(--accent)}
      .icon{width:34px;height:34px;flex:none}
      .title{font-weight:600;margin:0;font-size:16px;word-break:break-word}
      .meta{margin-top:4px;color:var(--muted);font-size:12px}
      .pill{display:inline-block;background:#0f172a;border:1px solid var(--border);border-radius:999px;padding:2px 8px;margin-right:6px}
      footer{max-width:1100px;margin:18px auto 40px;padding:0 16px;color:var(--muted);font-size:12px}
      .list{margin-top:16px}
      .list a{color:var(--accent);text-decoration:none}
    </style>
    <header>
      <h1>Repository folders</h1>
      <div class="muted">Top-level only. Click a folder to browse its own index. Search filters live on the client, no reloads.</div>
      <div class="search">
        <input id="q" type="search" placeholder="Filter folders… (e.g. img, my-resume, qr-code)">
      </div>
    </header>
    <section id="grid" class="grid"></section>
    <footer>
      <div class="list">
        <strong>Root files:</strong> <span id="root-files">(loading)</span>
      </div>
    </footer>
    <template id="card-tpl">
      <a class="card">
        <svg class="icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
          <path d="M3 7.5A1.5 1.5 0 0 1 4.5 6H9l2 2h8.5A1.5 1.5 0 0 1 21 9.5v7A1.5 1.5 0 0 1 19.5 18h-15A1.5 1.5 0 0 1 3 16.5v-9Z" stroke="currentColor" stroke-opacity=".9" />
        </svg>
        <div>
          <h3 class="title"></h3>
          <div class="meta"><span class="pill files"></span><span class="pill dirs"></span><span class="pill updated"></span></div>
        </div>
      </a>
    </template>
    <script>
      // These arrays will be filled by the workflow below.
      const DATA = { folders: [], rootFiles: [] };

      // Render
      const grid = document.getElementById('grid');
      const tpl = document.getElementById('card-tpl');
      const rootFilesEl = document.getElementById('root-files');
      function render(items){
        grid.innerHTML = '';
        items.forEach(f => {
          const a = tpl.content.firstElementChild.cloneNode(true);
          a.href = '../' + encodeURI(f.name) + '/';
          a.querySelector('.title').textContent = f.name + '/';
          a.querySelector('.files').textContent = (f.files===1? '1 file' : f.files+' files');
          a.querySelector('.dirs').textContent = (f.dirs===1? '1 folder' : f.dirs+' folders');
          a.querySelector('.updated').textContent = 'updated ' + f.updated;
          grid.appendChild(a);
        });
        if (DATA.rootFiles.length) {
          rootFilesEl.innerHTML = DATA.rootFiles.map(n => `<a href="../${encodeURI(n)}">${n}</a>`).join(' • ');
        } else {
          rootFilesEl.textContent = 'none';
        }
      }
      // Filter
      const q = document.getElementById('q');
      q.addEventListener('input', e => {
        const s = e.target.value.trim().toLowerCase();
        render(!s ? DATA.folders : DATA.folders.filter(f => f.name.toLowerCase().includes(s)));
      });

      // Initial render
      render([]);
      // Injected JSON will run now:
    </script>
    HTML

    # Build JSON for folders and root files
    tmp_json="$(mktemp)"
    echo '{ "folders": [' > "$tmp_json"

    first=1
    while IFS= read -r d; do
      name="${d#./}"
      # count files and subdirs inside (non-hidden by default; include dotfiles if you want, tweak -name)
      files=$(find "$d" -type f | wc -l | tr -d ' ')
      dirs=$(( $(find "$d" -type d | wc -l | tr -d ' ') - 1 ))
      # last updated date from git, fallback to today's date if shallow
      updated=$(git log -1 --format=%cs -- "$d" 2>/dev/null || date -u +%Y-%m-%d)
      [ "$first" -eq 0 ] && echo ',' >> "$tmp_json"
      first=0
      printf '  { "name": "%s", "files": %s, "dirs": %s, "updated": "%s" }' \
        "$name" "$files" "$dirs" "$updated" >> "$tmp_json"
    done < <(find . -mindepth 1 -maxdepth 1 -type d ! -path "./.git" ! -path "./.github" | sort)

    echo '], "rootFiles": [' >> "$tmp_json"
    first=1
    while IFS= read -r f; do
      base="${f#./}"
      [ "$first" -eq 0 ] && echo ',' >> "$tmp_json"
      first=0
      printf '  "%s"' "$base" >> "$tmp_json"
    done < <(find . -mindepth 1 -maxdepth 1 -type f | sort)
    echo '] }' >> "$tmp_json"

    # Inject JSON into the HTML as a script tag that populates DATA and renders
    printf '\n<script>\nDATA.folders = %s;\nDATA.rootFiles = %s;\nrender(DATA.folders);\n</script>\n' \
      "$(jq -c '.folders' "$tmp_json")" \
      "$(jq -c '.rootFiles' "$tmp_json")" >> sitemap/index.html
    HTML

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
