name: sitemap-and-directory-listing
on:
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Generate per-directory indexes (click-through browsing)
      - name: Generate per-directory listings
        uses: jayanta525/github-pages-directory-listing@v4.0.0
        with:
          FOLDER: .
          OUTPUT_PATH: .

      # Build styled sitemap at /sitemap (folders only + search)
      - name: Generate styled sitemap
        run: |
          set -euo pipefail
          mkdir -p sitemap

          # 1) Write HTML (single line to avoid YAML/heredoc issues)
          printf '%s' '<!doctype html><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Repository Folders</title><style>:root{--bg:#0b1220;--card:#111827;--text:#e5e7eb;--muted:#94a3b8;--accent:#60a5fa;--border:#1f2937}*{box-sizing:border-box}body{margin:0;background:var(--bg);color:var(--text);font:16px/1.5 ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,Arial}header{max-width:1100px;margin:32px auto 12px;padding:0 16px}h1{margin:0 0 8px;font-size:24px}.muted{color:var(--muted);font-size:14px}.search{margin-top:14px;display:flex;gap:8px}input[type=search]{width:100%;padding:12px 14px;border:1px solid var(--border);border-radius:10px;background:#0f172a;color:var(--text);outline:none}.grid{max-width:1100px;margin:18px auto;padding:0 16px;display:grid;grid-template-columns:repeat(auto-fill,minmax(220px,1fr));gap:14px}.card{background:var(--card);border:1px solid var(--border);border-radius:14px;padding:14px;display:flex;gap:12px;align-items:flex-start;text-decoration:none;color:inherit;transition:transform .08s ease,border-color .2s}.card:hover{transform:translateY(-1px);border-color:var(--accent)}.icon{width:34px;height:34px;flex:none}.title{font-weight:600;margin:0;font-size:16px;word-break:break-word}.meta{margin-top:4px;color:var(--muted);font-size:12px}.pill{display:inline-block;background:#0f172a;border:1px solid var(--border);border-radius:999px;padding:2px 8px;margin-right:6px}footer{max-width:1100px;margin:18px auto 40px;padding:0 16px;color:var(--muted);font-size:12px}.list{margin-top:16px}.list a{color:var(--accent);text-decoration:none}</style><header><h1>Repository folders</h1><div class=muted>Top-level only. Click a folder to browse its index. Client-side search.</div><div class=search><input id=q type=search placeholder="Filter folders… (e.g. img, my-resume, qr-code)"></div></header><section id=grid class=grid></section><footer><div class=list><strong>Root files:</strong> <span id=root-files>(loading)</span></div></footer><template id=card-tpl><a class=card><svg class=icon viewBox="0 0 24 24" fill=none aria-hidden=true><path d="M3 7.5A1.5 1.5 0 0 1 4.5 6H9l2 2h8.5A1.5 1.5 0 0 1 21 9.5v7A1.5 1.5 0 0 1 19.5 18h-15A1.5 1.5 0 0 1 3 16.5v-9Z" stroke=currentColor stroke-opacity=.9 /></svg><div><h3 class=title></h3><div class=meta><span class="pill files"></span><span class="pill dirs"></span><span class="pill updated"></span></div></div></a></template><script>const DATA={folders:[],rootFiles:[]},g=document.getElementById("grid"),t=document.getElementById("card-tpl"),r=document.getElementById("root-files");function render(e){g.innerHTML="",e.forEach(e=>{const d=t.content.firstElementChild.cloneNode(!0);d.href="../"+encodeURI(e.name)+"/",d.querySelector(".title").textContent=e.name+"/",d.querySelector(".files").textContent=1===e.files?"1 file":e.files+" files",d.querySelector(".dirs").textContent=1===e.dirs?"1 folder":e.dirs+" folders",d.querySelector(".updated").textContent="updated "+e.updated,g.appendChild(d)}),DATA.rootFiles.length?r.innerHTML=DATA.rootFiles.map(e=>`<a href="../${encodeURI(e)}">${e}</a>`).join(" • "):r.textContent="none"}const q=document.getElementById("q");q.addEventListener("input",e=>{const d=e.target.value.trim().toLowerCase();render(d?DATA.folders.filter(e=>e.name.toLowerCase().includes(d)):DATA.folders)}),render([]);</script>' > sitemap/index.html

          # 2) Ensure jq exists
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          # 3) Build JSON for top-level folders + root files
          tmp_json="$(mktemp)"
          echo '{ "folders": [' > "$tmp_json"
          first=1
          while IFS= read -r d; do
            name="${d#./}"
            files=$(find "$d" -type f | wc -l | tr -d " ")
            dirs=$(( $(find "$d" -type d | wc -l | tr -d " ") - 1 ))
            updated=$(git log -1 --format=%cs -- "$d" 2>/dev/null || date -u +%Y-%m-%d)
            [ "$first" -eq 0 ] && echo ',' >> "$tmp_json"
            first=0
            printf '  { "name": "%s", "files": %s, "dirs": %s, "updated": "%s" }' \
              "$name" "$files" "$dirs" "$updated" >> "$tmp_json"
          done < <(find . -mindepth 1 -maxdepth 1 -type d ! -path "./.git" ! -path "./.github" | sort)

          echo '], "rootFiles": [' >> "$tmp_json"
          first=1
          while IFS= read -r f; do
            base="${f#./}"
            [ "$first" -eq 0 ] && echo ',' >> "$tmp_json"
            first=0
            printf '  "%s"' "$base" >> "$tmp_json"
          done < <(find . -mindepth 1 -maxdepth 1 -type f | sort)
          echo '] }' >> "$tmp_json"

          # 4) Inject JSON + kick render
          printf '\n<script>\nDATA.folders = %s;\nDATA.rootFiles = %s;\nrender(DATA.folders);\n</script>\n' \
            "$(jq -c '.folders' "$tmp_json")" \
            "$(jq -c '.rootFiles' "$tmp_json")" >> sitemap/index.html

          # 5) Debug
          ls -la sitemap && echo "✅ sitemap/index.html generated"

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
